package com.travelinsurancemaster.services.clients;


import com.travelinsurancemaster.clients.allianz.*;
import com.travelinsurancemaster.model.ApiVendor;
import com.travelinsurancemaster.model.dto.PolicyMeta;
import com.travelinsurancemaster.model.dto.PolicyMetaCode;
import com.travelinsurancemaster.model.webservice.common.*;
import com.travelinsurancemaster.model.webservice.common.Product;
import com.travelinsurancemaster.services.AbstractSoapClient;
import com.travelinsurancemaster.util.DateUtil;
import org.apache.commons.lang3.RandomStringUtils;
import org.apache.commons.lang3.math.NumberUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.ws.client.core.support.WebServiceGatewaySupport;
import org.springframework.ws.soap.client.core.SoapActionCallback;

import javax.xml.bind.JAXBException;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Collections;
import java.util.List;


public class AllianzClient extends AbstractSoapClient {

    private static final Logger log = LoggerFactory.getLogger(AllianzClient.class);

    public static final String CURRENCY_USD = "USD";
    public static final String METHOD_ONLINE = "ONLINE";
    public static final String LANGUAGE_ENG = "ENG";
    public static final String PROD_ID_TYPE = "PRODUCTID";
    public static final String SUCCESS_RESPONSE = "SUCCESS";
    public static final String BUSINESS_UNIT_US = "US";
    public static final String FULFILLMENT_METHOD_EMAIL = "EMAIL";
    public static final String PAYMENT_METHOD_CC = "CC";
    public static final String TRAVELER_PRIMARY = "PRIMARY";
    public static final String TRAVELER_OTHER = "OTHER";

    private WebServiceGatewaySupport purchaseClient;

    private final SoapActionCallback QUOTE_ACTION = new SoapActionCallback("urn:accessamerica.services.insurance.travel/GetProductPrice");
    private final SoapActionCallback BOOK_ACTION = new SoapActionCallback("urn:accessamerica.services.insurance.travel/SendPurchases");

    public AllianzClient(WebServiceGatewaySupport purchaseClient) {
        this.purchaseClient = purchaseClient;
    }

    public GetProductPriceResponse quote(GetProductPrice request) throws IOException {
        GetProductPriceResponse response = (GetProductPriceResponse) getWebServiceTemplate().marshalSendAndReceive(request, QUOTE_ACTION);
        return response;
    }

    public SendPurchasesResponse book(SendPurchases request) throws JAXBException, IOException {
        SendPurchasesResponse response = (SendPurchasesResponse) purchaseClient.getWebServiceTemplate().marshalSendAndReceive(request, BOOK_ACTION);
        return response;
    }

    private String generateTransId() {
        return RandomStringUtils.randomAlphabetic(3) + RandomStringUtils.randomNumeric(8);
    }

    @Override
    protected QuoteResult quoteInternal(QuoteRequest request, PolicyMeta policyMeta, PolicyMetaCode policyMetaCode) {
        String policyCode = policyMetaCode.getCode();
        log.debug("Product code: {}, product name: {}", policyCode, policyMetaCode.getName());

        GetProductPrice quoteRequest = new GetProductPrice();

        Partner partner = new Partner();
        ProductPriceRequest productPriceRequest = new ProductPriceRequest();
        TravelBooking bookingDetails = new TravelBooking();

        quoteRequest.setPartner(partner);
        partner.setUserID(apiProperties.getAllianz().getUser());
        partner.setPassword(apiProperties.getAllianz().getPassword());

        quoteRequest.setProductPriceRequest(productPriceRequest);
        productPriceRequest.setAccam(apiProperties.getAllianz().getAccam());
        productPriceRequest.setTransactionID(generateTransId()); //Unique identifier for each XML transaction (request and response) that is generated by the partner. Typically a cart number

        productPriceRequest.setBookingDetails(bookingDetails);
        bookingDetails.setCurrency(CURRENCY_USD);
        bookingDetails.setTripCostIncludes(new ArrayOfItemsIncludedInPrice()); //optional
        bookingDetails.setTotalTripCost(request.getTripCost().doubleValue());
        //bookingDetails.setTotalMiles(); - optional
        bookingDetails.setMethod(METHOD_ONLINE);
        //bookingDetails.setPath("Domestic");
        //bookingDetails.setPNR();
        //bookingDetails.setReservationSystem();

        bookingDetails.setTravelAgent(apiProperties.getAllianz().getAgent());
        bookingDetails.setLanguage(LANGUAGE_ENG);

        Itinerary travelDetails = new Itinerary();
        productPriceRequest.setTravelDetails(travelDetails);

        // todo: check deposit date
        // bookingDetails.setDepositDate(getXMLGregorianCalendar(request.getDepositDateDefaultToday()));
        travelDetails.setDepartureDate(DateUtil.getXMLGregorianCalendar(DateUtil.fromLocalDate(request.getDepartDate())));
        travelDetails.setReturnDate(DateUtil.getXMLGregorianCalendar(DateUtil.fromLocalDate(request.getReturnDate())));

        /*TravelLocation origin = new TravelLocation();   //TODO - in documentation Strongly recommended that this is sent
        origin.setCountry();
        origin.setRegion();
        travelDetails.setOrigin(origin); */ // The location from which travel begins

        TravelLocation destination = new TravelLocation();
        destination.setCountry(request.getDestinationCountry() != null ? request.getDestinationCountry().name() : null);
        //destination.setRegion(request.getDestinationState() != null ? request.getDestinationState().name() : null);
        travelDetails.setDestination(destination);

        /*Provider provider = new Provider();
        provider.setCode();
        provider.setName();
        ArrayOfProviders providers = new ArrayOfProviders();
        providers.getProvider().add(provider);
        travelDetails.setProviders(providers);*/

        //travelDetails.setTravelReason("Business"); - additional information

        Travelers travelers = new Travelers();
        productPriceRequest.setTravelerDetails(travelers);
        travelers.setNumberOfTravelers(request.getTravelers().size());

        Residence address = new Residence();
        travelers.setAddress(address);
        address.setRegion(request.getResidentState() != null ? request.getResidentState().name() : null);
        address.setCountry(request.getResidentCountry() != null ? request.getResidentCountry().name() : null);
        //address.setCity();
        //address.setPostalCode();

        travelers.setTravelerList(new ArrayOfTravelers());
        List<Traveler> travelerList = travelers.getTravelerList().getTraveler();

        for (int i = 0; i < request.getTravelers().size(); i++) {
            GenericTraveler genericTraveler = request.getTravelers().get(i);
            Traveler traveler = new Traveler();
            travelerList.add(traveler);

            /*traveler.setFirstName();
            traveler.setLastName();
            traveler.setMiddleInitial();
            traveler.setBirthdate();*/
            traveler.setAge(genericTraveler.getAge());
            traveler.setTripCost(genericTraveler.getTripCost().doubleValue());
            traveler.setSequence(i);
        }

        ProductBooking productDetails = new ProductBooking();
        productPriceRequest.setProductDetails(productDetails);
        productDetails.setProductIdentifierType(PROD_ID_TYPE);

        productDetails.setProducts(new ArrayOfProductIDs());
        List<String> productID = productDetails.getProducts().getProductID();

        productID.add(policyCode);

        //call WS
        GetProductPriceResponse response = (GetProductPriceResponse) getWebServiceTemplate().marshalSendAndReceive(quoteRequest, QUOTE_ACTION);
        QuoteResult quoteResult = new QuoteResult();
        ProductPriceResponse productPriceResponse = response.getProductPriceResponse();
        ResponseStatus status = productPriceResponse.getStatus();
        if (status.getCode().equals(SUCCESS_RESPONSE)) {
            quoteResult.setStatus(Result.Status.SUCCESS);

            quoteResult.transactionId = productPriceResponse.getTransactionID();

            for (ProductPrice productPrice : productPriceResponse.getProductPrice()) {
                Product product = new Product(policyMeta, policyMetaCode, BigDecimal.valueOf(productPrice.getTotalPrice()), request.getUpsaleValues());
                quoteResult.products.add(product);
            }
        } else {
            quoteResult.setStatus(Result.Status.ERROR);
            Result.Error error = new Result.Error();

            error.setErrorMsg(status.getMessage() + " " + status.getReason());
            quoteResult.getErrors().add(error);
        }
        return quoteResult;
    }

    private String getCardType(CardType cardType) {
        String type;
        switch (cardType) {
            case VISA:
                type = "VI";
                break;
            case MasterCard:
                type = "MC";
                break;
            case AmericanExpress:
                type = "AE";
                break;
            default:
                type = "";
        }
        return type;
    }


    @Override
    protected PurchaseResponse purchaseInternal(PurchaseRequest request) {

        SendPurchases bookRequest = new SendPurchases();
        Partner partner = new Partner();

        partner.setUserID(apiProperties.getAllianz().getUser());
        partner.setPassword(apiProperties.getAllianz().getPassword());
        bookRequest.setPartner(partner);

        PurchasesRequest purchaseRequest = new PurchasesRequest();
        bookRequest.setPurchasesRequest(purchaseRequest);
        purchaseRequest.setAccam(apiProperties.getAllianz().getAccam());
        purchaseRequest.setBusinessUnit(BUSINESS_UNIT_US);
        purchaseRequest.setTransactionID(generateTransId()); //Unique identifier for each XML transaction (request and response) that is generated by the partner. Typically a cart number

        ArrayOfPurchases arrayOfPurchases = new ArrayOfPurchases();
        List<Purchase> purchaseList = arrayOfPurchases.getPurchase();

        Purchase purchase = new Purchase();
        //purchase.setOrderID("1"); // TODO ??
        purchase.setPartnerBookingID(generateTransId()); //Unique identifier for the travel booking and purchase date that is generated by the partner.  i.e. PNR. This number must be unique per calendar day
        InsuranceBooking bookingDetails = new InsuranceBooking();

        bookingDetails.setMethod(METHOD_ONLINE);
        bookingDetails.setStatus(InsuranceBookingStatus.NEW);
        //bookingDetails.setCoSourceID();
        //bookingDetails.setReferringURL();
        bookingDetails.setType(InsuranceBookingType.ADD);
        bookingDetails.setCurrency(CURRENCY_USD);
        bookingDetails.setTotalCoverageAmount(request.getQuoteRequest().getTripCost().doubleValue());
        bookingDetails.setTotalPrice(request.getProduct().getTotalPrice().doubleValue());
        bookingDetails.setTotalPremiumPrice(request.getProduct().getTotalPrice().doubleValue()); // legacy - not working without that???
        /*bookingDetails.setTotalTaxes();
        bookingDetails.setTotalCharitableContribution();
        bookingDetails.setTaxRegion();
        bookingDetails.setPromotionCode();
        bookingDetails.setSubscribeToMarketing();*/

        Purchaser purchaser = new Purchaser();
        bookingDetails.setPurchaser(purchaser);
        purchaser.setFirstName(request.getCreditCard().getCcName());
        purchaser.setLastName(" ");

        BillingAddress billingAddress = new BillingAddress();
        purchaser.setBillingAddress(billingAddress);
        billingAddress.setStreet(request.getCreditCard().getCcAddress());
        //billingAddress.setStreet2();
        billingAddress.setCity(request.getCreditCard().getCcCity());
        billingAddress.setRegion(request.getCreditCard().getCcStateCode() != null ? request.getCreditCard().getCcStateCode().name() : null);
        billingAddress.setPostalCode(request.getCreditCard().getCcZipCode());
        billingAddress.setCountry(request.getCreditCard().getCcCountry() != null ? request.getCreditCard().getCcCountry().name() : null);
        purchaser.setEmailAddress(request.getEmail());
        //purchaser.setSecondaryEmailAddress();
        purchaser.setPhoneNumber(NumberUtils.toLong(request.getPhone())); //TODO make clever parsing
        bookingDetails.setFulfillmentMethod(FULFILLMENT_METHOD_EMAIL);
        bookingDetails.setPaymentMethod(PAYMENT_METHOD_CC);
        //bookingDetails.setPaymentTransactionID();
        CreditCard card = new CreditCard();
        bookingDetails.setCreditCard(card);
        card.setCardholderName(request.getCreditCard().getCcName());
        card.setExpireMonth(Integer.parseInt(request.getCreditCard().getCcExpMonth())); //TODO make clever parsing
        card.setExpireYear(Integer.parseInt(request.getCreditCard().getCcExpYear())); //TODO make clever parsing
        card.setCardNumber(request.getCreditCard().getCcNumber());
        card.setCardType(getCardType(request.getCreditCard().getCcType()));

        bookingDetails.setTravelAgent(apiProperties.getAllianz().getAgent());
        //bookingDetails.setAccountUserType();
        //bookingDetails.setAccountUserName();

        purchase.setInsuranceBookingDetails(bookingDetails);
        purchaseList.add(purchase);
        purchaseRequest.setPurchases(arrayOfPurchases);
        TravelBooking travelBooking = new TravelBooking();
        purchase.setTravelBookingDetails(travelBooking);

        // todo: check deposit date
        // travelBooking.setDepositDate(getXMLGregorianCalendar(request.getQuoteRequest().getDepositDateDefaultToday()));
        travelBooking.setCurrency(CURRENCY_USD);
        travelBooking.setTotalTripCost(request.getQuoteRequest().getTripCost().doubleValue());
        //travelBooking.setTotalMiles();
        travelBooking.setMethod(METHOD_ONLINE);
        travelBooking.setTravelAgent(apiProperties.getAllianz().getAgent());
        travelBooking.setLanguage(LANGUAGE_ENG);

        Itinerary travelDetails = new Itinerary();
        purchase.setTravelDetails(travelDetails);

        // todo: check deposit date
        // bookingDetails.setPurchaseDateTime(getXMLGregorianCalendar(request.getQuoteRequest().getDepositDateDefaultToday()));
        travelDetails.setDepartureDate(DateUtil.getXMLGregorianCalendar(DateUtil.fromLocalDate(request.getQuoteRequest().getDepartDate())));
        travelDetails.setReturnDate(DateUtil.getXMLGregorianCalendar(DateUtil.fromLocalDate(request.getQuoteRequest().getReturnDate())));


//        TravelLocation location = new TravelLocation();
//        location.setCode("PIT");
//        location.setCountry("US");
//        travelDetails.setOrigin(location); // The location from which travel begins

        TravelLocation destination = new TravelLocation();
        //destination.setRegion(request.getQuoteRequest().getDestinationState() != null ? request.getQuoteRequest().getDestinationState().name() : null);
        destination.setCountry(request.getQuoteRequest().getDestinationCountry() != null ? request.getQuoteRequest().getDestinationCountry().name() : null);
        travelDetails.setDestination(destination);

        ArrayOfProducts productDetails = new ArrayOfProducts();
        purchase.setProductDetails(productDetails);
        List<com.travelinsurancemaster.clients.allianz.Product> products = productDetails.getProduct();
        com.travelinsurancemaster.clients.allianz.Product product = new com.travelinsurancemaster.clients.allianz.Product();
        products.add(product);
        product.setSequence(0);
        //product.setQuoteID("258435190121648543"); - TODO: pass from quote
        product.setProductID(request.getProduct().getPolicyMetaCode().getCode());
        ArrayOfPolicyInsureds insuredDetails = new ArrayOfPolicyInsureds();
        product.setInsuredDetails(insuredDetails);
        for (int i = 0; i < request.getTravelers().size(); i++) {
            GenericTraveler genericTraveler = request.getTravelers().get(i);
            PolicyInsured traveler = new PolicyInsured();
            insuredDetails.getInsured().add(traveler);
            traveler.setInsuredSequence(i);
            traveler.setInsuredType(genericTraveler.isPrimary() ? TRAVELER_PRIMARY : TRAVELER_OTHER);
            traveler.setFirstName(genericTraveler.getFirstName());
            traveler.setLastName(genericTraveler.getLastName());
            traveler.setMiddleInitial(genericTraveler.getMiddleInitials());
            //traveler.setTripCost(genericTraveler.getTripCost());  - If this element is passed it supersedes that of TotalCoverageAmount
            traveler.setBirthdate(DateUtil.getXMLGregorianCalendar(DateUtil.fromLocalDate(genericTraveler.getBirthdaySafe())));
            if (genericTraveler.isPrimary()) {
                traveler.setPhoneNumber(request.getPhone());

            }
        }
        product.setCoverageAmount(request.getQuoteRequest().getTripCost().doubleValue()); //The trip cost to be covered by the insurance product.
        product.setPrice(request.getProduct().getTotalPrice().doubleValue());
        product.setPremiumPrice(request.getProduct().getTotalPrice().doubleValue());
        product.setProductBookingID(generateTransId());  //The insurance product booking id or policy number. Required if partner is generating the policy number

        PurchaseResponse response = new PurchaseResponse();

        SendPurchasesResponse purchasesResponse;
        try {
            purchasesResponse = book(bookRequest);
        } catch (JAXBException | IOException e) {
            log.error(e.getMessage(), e);
            response.getErrors().add(new Result.Error("", e.getMessage()));
            response.setStatus(Result.Status.ERROR);
            return response;
        }
        PurchasesResponse purchResp = purchasesResponse.getPurchasesResponse();
        if (SUCCESS_RESPONSE.equals(purchResp.getStatus().getCode())) {
            response.setStatus(Result.Status.SUCCESS);
            response.setPolicyNumber(purchResp.getTransactionID());
        } else {
            response.setStatus(Result.Status.ERROR);
            response.getErrors().add(
                    new Result.Error(purchResp.getStatus().getCode(),
                            purchResp.getStatus().getMessage() + purchResp.getStatus().getReason()));
            log.error(purchResp.getStatus().getMessage());
        }
        return response;
    }

    @Override
    public String getVendorCode() {
        return ApiVendor.Allianz;
    }

    @Override
    protected List<Result.Error> validateQuoteRequest(QuoteRequest request, PolicyMetaCode policyMetaCode) {
        // todo: check deposit date
        //Deposit Date cannot be later than Purchase Date (today).
        //Trip Departure Date cannot be later than Trip Return Date and Policy Purchase Date cannot be later than Trip Departure Date.
        /*if (request.getDepartDate().after(request.getReturnDate()) || request.getDepositDateDefaultToday().after(request.getDepartDate())) {
            return Arrays.asList(new Result.Error("-1", "Trip Departure Date cannot be later than Trip Return Date and Policy Purchase Date cannot be later than Trip Departure Date"));
        }*/
        return Collections.emptyList();
    }

    /* fix for Allianz
    public static class AllianzPrefixMapper extends NamespacePrefixMapper {

        private static final String[] URL = {"urn:accessamerica.services.insurance.travel"};

        public String getPreferredPrefix(String uri, String suggest, boolean require) {
            return URL[0].equals(uri) ? "" : suggest;
        }

        public String[] getPreDeclaredNamespaceUris() {
            return URL;
        }
    }*/
}