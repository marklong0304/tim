import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    ext {
        springBootVersion = '1.5.15.RELEASE'
        springLoadedVersion = '1.2.8.RELEASE'
    }
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "http://repo.spring.io/libs-release" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.springframework:springloaded:${springLoadedVersion}")
        classpath "io.spring.gradle:dependency-management-plugin:1.0.3.RELEASE"
    }
}

plugins {
    id 'net.nemerosa.versioning' version '2.4.0'
}

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'war'
apply from: 'gradle/plugins/jaxb.gradle'
apply plugin: 'io.spring.dependency-management'


//     id 'net.nemerosa.versioning' version '2.4.0'

compileJava {
//    options.bootClasspath = "${System.getProperty('java.home')}/lib/rt.jar"  //fix for NamespacePrefixMapper used in Allianz
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    options.encoding = 'UTF-8'
}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencyManagement {
    imports {
        mavenBom 'com.amazonaws:aws-java-sdk-bom:1.11.228'
    }
}

task genJaxbITravelInsured(type: GenJaxb) {
    // schemas = "https://beta.itravelinsured.com/WebService/iTIapi.asmx?WSDL"
    schemas = "src/main/resources/wsdl/iTravelInsuredBeta.wsdl"
    packagePrefix = "itravelinsured"
}

task genJaxbAllianz(type: GenJaxb) {
    // schemas = "https://uatgateway.americas.allianz-assistance.com/services/productprice.asmx?WSDL"
    schemas = "src/main/resources/wsdl/AGATravelInsurance.wsdl"
    packagePrefix = "allianz"
}

task genJaxbTravelInsured(type: GenJaxb) {
    // schemas = "https://test.travelinsured.com/TIWebService/Service.asmx?wsdl"
    schemas = "src/main/resources/wsdl/TravelInsured.wsdl"
    packagePrefix = "travelinsured"
}

task genJaxbTravelGuard(type: GenJaxb) {
    schemas = "src/main/resources/wsdl/TravelGuard.wsdl"
    bindings = files("src/main/resources/wsdl/TravelGuard.xjb")
    packagePrefix = "travelguard"
}

task genTravelexInsurance(type: GenJaxb) {
    schemas = ['InsuranceBookRS.xsd',
               'PaymentConfigurationResponse.xsd',
               'TransIT_API3.0_Interface_051919.xsd'].join(' ')
    schemaDir = 'src/main/resources/xsd/travelex'
    packagePrefix = "travelex"
}

task genXsdTravelInsured(type: GenJaxb) {
    schemas = ['OTA_InsurancePlanSearchRQ.xsd',
               'OTA_InsurancePlanSearchRS.xsd',
               'OTA_InsuranceQuoteRQ.xsd',
               'OTA_InsuranceQuoteRS.xsd',
               'OTA_InsuranceBookRQ.xsd',
               'OTA_InsuranceBookRS.xsd',
               'OTA_PingRQ.xsd',
               'OTA_PingRS.xsd',
               'OTA_ErrorRS.xsd'].join(' ')

    schemaDir = 'src/main/resources/xsd/travelinsured'
    bindings = files("src/main/resources/xsd/travelinsured/OTA_AirCommonTypes.xjb")

    packagePrefix = "travelinsured.xsd"
}

task getXsdCSA(type: GenJaxb) {
    schemas = "schema.xsd"
    schemaDir = 'src/main/resources/xsd/csa'
    packagePrefix = "csa.xsd"
}

task genJaxbRoamright(type: GenJaxb) {
    schemas = 'src/main/resources/wsdl/RoamRight.wsdl'
    packagePrefix = "roamright"
}

def genTasks = [genJaxbITravelInsured, genJaxbTravelInsured, genXsdTravelInsured, genJaxbAllianz, getXsdCSA, genJaxbTravelGuard, genTravelexInsurance, genJaxbRoamright]

genTasks.each {
    sourceSets.main.java.srcDirs += it.sourcesDir
}

genTasks.each {
    compileJava.dependsOn it
}

clean {
    delete 'generated-sources'
}

dependencies {
    // Web Services
    compile("org.springframework.boot:spring-boot-starter")
    compile("org.springframework.ws:spring-ws-core")

    compile("org.apache.commons:commons-lang3:3.6")
    compile("org.apache.commons:commons-collections4:4.0")
    compile("org.apache.commons:commons-io:1.3.2")
    compile("joda-time:joda-time")

    // JPA
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile("com.h2database:h2")
    compile('org.postgresql:postgresql:9.4-1201-jdbc41')
    compile("org.flywaydb:flyway-core")
    compile("com.zaxxer:HikariCP")
    //providedCompile('org.postgresql:postgresql:9.4-1201-jdbc41') - Later, when standalone tomcat will be used (or make prod and development profiles)

    // Security
    compile('org.springframework.boot:spring-boot-starter-security');
    compile('org.thymeleaf.extras:thymeleaf-extras-springsecurity4');
    // Wss4jSecurityInterceptor, providing authentication to client
    compile('org.springframework.ws:spring-ws-security:2.2.0.RELEASE')
    compile('org.apache.ws.security:wss4j:1.6.6')

    // Web
    compile("org.springframework.boot:spring-boot-starter-thymeleaf")
    compile("net.sourceforge.nekohtml:nekohtml:1.9.21")
    compile("nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect")

    //Mail
    compile('com.icegreen:greenmail:1.4.0');
    compile('org.springframework:spring-context-support');

    // Apache HTTPClient for GZip support in RestTemplate
    compile('org.apache.httpcomponents:httpclient:4.5')

    //Pdf
    compile('com.itextpdf:itextpdf:5.0.6') {
        exclude(group: 'org.bouncycastle')
        exclude(group: 'bouncycastle')
    }
    compile group: 'org.xhtmlrenderer', name: 'flying-saucer-core', version: '9.1.6'
    compile group: 'org.xhtmlrenderer', name: 'flying-saucer-pdf-itext5', version: '9.1.6'

    // GeoIP Legacy Java API
    compile('com.maxmind.geoip:geoip-api:1.2.14')

    // Google guava
    compile('com.google.guava:guava:18.0')

    // Cache
    compile 'com.github.ben-manes.caffeine:caffeine'

    // Apache poi
    compile('org.apache.poi:poi:3.12')
    compile('org.apache.poi:poi-ooxml:3.12')

    // groovy
    compile ('org.codehaus.groovy:groovy-all:2.4.4')

    compile('org.hibernate:hibernate-core:5.4.4.Final')
    compile('org.hibernate:hibernate-entitymanager:5.4.4.Final')
    compile('org.hibernate:hibernate-ehcache:5.4.4.Final')
    compile('org.hibernate:hibernate-search-orm:5.11.2.Final')
    compile('net.sf.ehcache:ehcache:2.10.6')

    // lucene
    compile('org.apache.lucene:lucene-backward-codecs:5.5.5')

    //AWS
    compile 'com.amazonaws:aws-java-sdk-s3'
    // https://mvnrepository.com/artifact/com.amazonaws/aws-java-sdk-cloudfront
    compile group: 'com.amazonaws', name: 'aws-java-sdk-cloudfront', version: '1.11.250'
    testCompile group: 'junit', name: 'junit', version: '4.12'

    //Velocity
    compile('org.apache.velocity:velocity:1.7')

    compileOnly('org.projectlombok:lombok:1.16.20')
//    compileOnly('org.projectlombok:lombok:1.18.4')
    compile("org.springframework.boot:spring-boot-devtools")

    //Date and time
    compile('com.fasterxml.jackson.datatype:jackson-datatype-jsr310')
    compile('org.thymeleaf.extras:thymeleaf-extras-java8time')

    //Quote from web pages
    compile('org.seleniumhq.selenium:selenium-api:3.141.59')
    compile('org.seleniumhq.selenium:selenium-java:3.141.59')
    compile('org.seleniumhq.selenium:selenium-remote-driver:3.141.59')
    compile('org.seleniumhq.selenium:selenium-chrome-driver:3.141.59')
    compile('com.google.guava:guava:28.0-jre')
    compile('org.jsoup:jsoup:1.11.3')

    //Misc
    compile('com.ibm.icu:icu4j:64.2')
    compile fileTree(include: ['*.jar'], dir: 'libs')

    compile("org.springframework.boot:spring-boot-starter-tomcat")
    testCompile("org.springframework.boot:spring-boot-starter-test")
}

task wrapper(type: Wrapper) {
    gradleVersion = 2.14
}


def appVer = versioning.info.full

def buildInfo = {
    def revision = ''
    def hash = ''
    try {
        revision = 'git rev-list --count HEAD'.execute().text.trim()
        hash = 'git rev-parse --short HEAD'.execute().text.trim()
        logger.info("building: ${revision}.${hash}")
    } catch (e) {
        logger.error("Can't get GIT revision info. ${e.getMessage()}")
    }
    [revision: revision, hash: hash, timestamp: new Date().format("yyyy-MM-dd HH:mm:ss")]
}()

bootRun {
    if (project.hasProperty('jvmArgs')) {
        jvmArgs project.jvmArgs.split('\\s+')
    }
}

processResources {
    filesNotMatching("**/*.png") {
        filter ReplaceTokens, tokens: [
                activeProfiles: project.hasProperty("activeProfiles") ? activeProfiles : "local"
        ]
    }
    filesNotMatching('**/application.properties') {
        filter ReplaceTokens, tokens: [
                appVersion: appVer
        ]
    }
}

ext.sharedManifest = manifest {
    attributes("Implementation-Title": "InsuranceMaster",
            "Implementation-Version": "${appVer}-r${buildInfo.revision}.${buildInfo.hash} ${buildInfo.timestamp}")
}

jar {
    baseName = 'insurance-master'
    manifest = project.manifest {
        from sharedManifest
    }
    version = appVer
}

war {
    baseName = 'insurance-master'
    manifest = project.manifest {
        from sharedManifest
    }
}

idea {
    module {
        inheritOutputDirs = false
        outputDir = file("$buildDir/classes/main/")
    }
}
